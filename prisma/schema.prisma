// Babak Marketplace Backend - Prisma Schema
// This schema defines the complete database structure for the marketplace platform

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum UserRole {
  USER
  ADMIN
  SUPERUSER
}

enum ListingStatus {
  DRAFT
  ACTIVE
  PENDING
  REJECTED
  ARCHIVED
}

enum ListingCondition {
  NEW
  LIKE_NEW
  EXCELLENT
  GOOD
  FAIR
  POOR
}

enum NegotiableStatus {
  FIXED_PRICE
  NEGOTIABLE
  MAKE_OFFER
}

enum AttributeType {
  TEXT
  NUMBER
  BOOLEAN
  DATE
  SELECT
  MULTISELECT
  RANGE
}

enum AttributeDataType {
  STRING
  INTEGER
  DECIMAL
  BOOLEAN
  DATE
  JSON
}

// Users and Authentication
model User {
  id          Int      @id @default(autoincrement())
  email       String   @unique
  passwordHash String  @map("password_hash")
  name        String?
  avatarUrl   String?  @map("avatar_url")
  phone       String?
  location    String?
  locationAddress String? @map("location_address") // Full formatted address
  locationCity String? @map("location_city") // City name
  locationCountry String? @map("location_country") // Country name
  locationLatitude Decimal? @map("location_latitude") @db.Decimal(10, 8)
  locationLongitude Decimal? @map("location_longitude") @db.Decimal(11, 8)
  locationPlaceId String? @map("location_place_id") // Google Places ID
  bio         String?
  role        UserRole @default(USER)
  emailVerified Boolean @default(false) @map("email_verified")
  emailVerificationToken String? @unique @map("email_verification_token")
  emailVerificationExpires DateTime? @map("email_verification_expires")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  sessions      UserSession[]
  listings      Listing[]
  sentMessages  Message[]
  threadParticipants ThreadParticipant[]
  favorites     Favorite[]
  reviews       Review[]
  notifications Notification[]
  reports       Report[]
  views         ListingView[] @relation("UserViews")
  settings      UserSettings?

  @@map("users")
}

model UserSession {
  id               Int      @id @default(autoincrement())
  userId           Int      @map("user_id")
  refreshTokenHash String   @map("refresh_token_hash")
  userAgent        String?  @map("user_agent")
  ipAddress        String?  @map("ip_address")
  createdAt        DateTime @default(now()) @map("created_at")
  expiresAt        DateTime @map("expires_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_sessions")
}

model UserSettings {
  id     Int @id @default(autoincrement())
  userId Int @unique @map("user_id")

  // Notification Settings
  emailNotifications Boolean @default(true) @map("email_notifications")
  pushNotifications  Boolean @default(true) @map("push_notifications")
  messageAlerts      Boolean @default(true) @map("message_alerts")
  listingUpdates     Boolean @default(true) @map("listing_updates")
  marketingEmails    Boolean @default(false) @map("marketing_emails")

  // Privacy Settings
  profileVisibility   String  @default("public") @map("profile_visibility") // public, private, buyers-only
  showContactInfo     Boolean @default(true) @map("show_contact_info")
  showLastSeen        Boolean @default(true) @map("show_last_seen")
  allowDirectMessages Boolean @default(true) @map("allow_direct_messages")

  // Preferences
  theme    String @default("system") // light, dark, system
  language String @default("en")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @updatedAt @map("updated_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("user_settings")
}

// Categories
model Category {
  id       Int     @id @default(autoincrement())
  name     String
  slug     String  @unique
  parentId Int?    @map("parent_id")
  depth    Int     @default(0)
  path     String? // Materialized path for efficient queries
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  parent   Category?  @relation("CategoryHierarchy", fields: [parentId], references: [id])
  children Category[] @relation("CategoryHierarchy")
  listings Listing[]
  attributes CategoryAttribute[]

  @@map("categories")
}

// Category Attributes - Defines what attributes are available for each category
model CategoryAttribute {
  id          Int             @id @default(autoincrement())
  categoryId  Int             @map("category_id")
  name        String          // Display name (e.g., "Bedrooms", "Engine Power")
  key         String          // Internal key (e.g., "bedrooms", "engine_power")
  type        AttributeType   // UI component type
  dataType    AttributeDataType // Data storage type
  required    Boolean         @default(false)
  searchable  Boolean         @default(true) // Can be used in search filters
  sortable    Boolean         @default(false) // Can be used for sorting
  options     Json?           // For SELECT/MULTISELECT: array of options
  validation  Json?           // Validation rules (min, max, pattern, etc.)
  unit        String?         // Unit of measurement (e.g., "mÂ²", "HP", "kg")
  placeholder String?         // Placeholder text for form fields
  helpText    String?         // Help text for users
  displayOrder Int           @default(0) @map("display_order")
  createdAt   DateTime        @default(now()) @map("created_at")
  updatedAt   DateTime        @updatedAt @map("updated_at")

  // Relations
  category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  listingAttributes ListingAttribute[]

  @@unique([categoryId, key])
  @@map("category_attributes")
}

// Listings
model Listing {
  id          Int           @id @default(autoincrement())
  sellerId    Int           @map("seller_id")
  title       String
  description String?
  price       Decimal       @db.Decimal(12, 2)
  currency    String        @default("USD")
  categoryId  Int?          @map("category_id")
  city        String?
  latitude    Decimal?      @db.Decimal(10, 8)
  longitude   Decimal?      @db.Decimal(11, 8)
  locationAddress String?   @map("location_address") // Full formatted address
  locationCity String?      @map("location_city") // City name
  locationCountry String?   @map("location_country") // Country name
  locationPlaceId String?   @map("location_place_id") // Google Places ID
  status      ListingStatus @default(DRAFT)
  condition   ListingCondition? @default(GOOD)
  negotiable  NegotiableStatus @default(FIXED_PRICE)
  isVip       Boolean       @default(false) @map("is_vip")
  isFeatured  Boolean       @default(false) @map("is_featured")
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @updatedAt @map("updated_at")
  expiresAt   DateTime?     @map("expires_at")

  // Relations
  seller    User            @relation(fields: [sellerId], references: [id], onDelete: Cascade)
  category  Category?       @relation(fields: [categoryId], references: [id])
  images    ListingImage[]
  threads   Thread[]
  favorites Favorite[]
  reviews   Review[]
  reports   Report[]
  views     ListingView[]
  attributes ListingAttribute[]

  @@map("listings")
}

// Listing Attributes - Stores actual attribute values for listings
model ListingAttribute {
  id          Int               @id @default(autoincrement())
  listingId   Int               @map("listing_id")
  attributeId Int               @map("attribute_id")
  value       String?           // String representation of the value
  numericValue Decimal?         @db.Decimal(15, 4) @map("numeric_value") // For numeric values and ranges
  booleanValue Boolean?         @map("boolean_value") // For boolean values
  dateValue   DateTime?         @map("date_value") // For date values
  jsonValue   Json?             @map("json_value") // For complex values (arrays, objects)
  createdAt   DateTime          @default(now()) @map("created_at")
  updatedAt   DateTime          @updatedAt @map("updated_at")

  // Relations
  listing   Listing           @relation(fields: [listingId], references: [id], onDelete: Cascade)
  attribute CategoryAttribute @relation(fields: [attributeId], references: [id], onDelete: Cascade)

  @@unique([listingId, attributeId])
  @@index([attributeId, numericValue]) // For range queries
  @@index([attributeId, value]) // For text searches
  @@index([attributeId, booleanValue]) // For boolean filters
  @@map("listing_attributes")
}

model ListingImage {
  id        Int      @id @default(autoincrement())
  listingId Int      @map("listing_id")
  url       String
  position  Int      @default(0)
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  listing Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)

  @@map("listing_images")
}

// Messaging System
model Thread {
  id            Int      @id @default(autoincrement())
  listingId     Int      @map("listing_id")
  createdAt     DateTime @default(now()) @map("created_at")
  lastMessageAt DateTime @default(now()) @map("last_message_at")

  // Relations
  listing      Listing             @relation(fields: [listingId], references: [id], onDelete: Cascade)
  participants ThreadParticipant[]
  messages     Message[]

  @@map("threads")
}

model ThreadParticipant {
  id         Int      @id @default(autoincrement())
  threadId   Int      @map("thread_id")
  userId     Int      @map("user_id")
  lastReadAt DateTime @default(now()) @map("last_read_at")

  // Relations
  thread Thread @relation(fields: [threadId], references: [id], onDelete: Cascade)
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([threadId, userId])
  @@map("thread_participants")
}

model Message {
  id       Int      @id @default(autoincrement())
  threadId Int      @map("thread_id")
  senderId Int      @map("sender_id")
  content  String
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  thread Thread @relation(fields: [threadId], references: [id], onDelete: Cascade)
  sender User   @relation(fields: [senderId], references: [id], onDelete: Cascade)

  @@map("messages")
}

// User Favorites
model Favorite {
  userId    Int      @map("user_id")
  listingId Int      @map("listing_id")
  addedAt   DateTime @default(now()) @map("added_at")

  // Relations
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  listing Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)

  @@id([userId, listingId])
  @@map("favorites")
}

// Reviews and Ratings
model Review {
  id         Int      @id @default(autoincrement())
  listingId  Int      @map("listing_id")
  reviewerId Int      @map("reviewer_id")
  rating     Int      @db.SmallInt
  comment    String?
  createdAt  DateTime @default(now()) @map("created_at")

  // Relations
  listing  Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)
  reviewer User    @relation(fields: [reviewerId], references: [id], onDelete: Cascade)

  @@map("reviews")
}

// User Notifications
model Notification {
  id        Int      @id @default(autoincrement())
  userId    Int      @map("user_id")
  type      String
  title     String
  body      String?
  actionUrl String?  @map("action_url")
  read      Boolean  @default(false)
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

// Content Reports
model Report {
  id         Int      @id @default(autoincrement())
  listingId  Int      @map("listing_id")
  reporterId Int      @map("reporter_id")
  category   String
  reason     String
  details    String?
  createdAt  DateTime @default(now()) @map("created_at")

  // Relations
  listing  Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)
  reporter User    @relation(fields: [reporterId], references: [id], onDelete: Cascade)

  @@map("reports")
}

// Listing Views Tracking
model ListingView {
  id        Int      @id @default(autoincrement())
  listingId Int      @map("listing_id")
  viewerId  Int?     @map("viewer_id") // Optional for anonymous views
  ipAddress String?  @map("ip_address")
  userAgent String?  @map("user_agent")
  createdAt DateTime @default(now()) @map("created_at")

  // Relations
  listing Listing @relation(fields: [listingId], references: [id], onDelete: Cascade)
  viewer  User?   @relation("UserViews", fields: [viewerId], references: [id], onDelete: SetNull)

  @@map("listing_views")
}
